buildscript {
    ext {
        kotlin_group = 'org.jetbrains.kotlin'
        kotlin_version = '1.2.71'

        junit_group = 'org.junit.jupiter'
        junit_version = '5.3.1'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "$kotlin_group:kotlin-gradle-plugin:$kotlin_version"
    }
}

group 'io.onixlabs'
version '2.0.0'

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://jitpack.io" }
    }

    configurations {
        all {
            exclude module: 'slf4j-log4j12'
            exclude module: 'log4j-slf4j-impl'
        }
    }

    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'

    dependencies {
        implementation "$kotlin_group:kotlin-stdlib-jdk8:$kotlin_version"
        implementation "$kotlin_group:kotlin-reflect:$kotlin_version"

        testRuntimeOnly "$junit_group:junit-jupiter-engine:$junit_version"
        testImplementation "$junit_group:junit-jupiter-api:$junit_version"
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true
        }
    }

    jar {
        exclude '**/log4j2*.xml'
    }

    test {
        maxHeapSize = "4096m"
        useJUnitPlatform()
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/onix-labs/onixlabs-kotlin-core")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            groupId = project.group
            version = project.version
            artifactId = 'onixlabs-kotlin-core'
            from components.java
        }
    }
}

task cleanLocal(type: Exec) {
    def shellExec = System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows') ? 'cmd' : 'sh'
    commandLine shellExec, './clean-cache.sh'
}

task releaseLocal(type: GradleBuild) {
    startParameter = gradle.startParameter.newInstance()
    tasks = ['clean', 'build', 'publishToMavenLocal']
}

task releasePublic(type: GradleBuild) {
    startParameter = gradle.startParameter.newInstance()
    tasks = ['clean', 'build', 'publishToMavenLocal', 'publish']
}